= abstract_class {<img src="https://travis-ci.org/shuber/abstract_class.svg?branch=master" alt="Build Status" />}[https://travis-ci.org/shuber/abstract_class] {<img src="https://codeclimate.com/github/shuber/abstract_class/badges/gpa.svg" />}[https://codeclimate.com/github/shuber/abstract_class] {<img src="https://codeclimate.com/github/shuber/abstract_class/badges/coverage.svg" />}[https://codeclimate.com/github/shuber/abstract_class]

Abstract classes in ruby.

Like modules, abstract classes cannot be instantiated.

Unlike modules, abstract classes can be inherited and their derived classes can be instantiated.

Check out the {java}[http://docs.oracle.com/javase/tutorial/java/IandI/abstract.html] or {php}[http://php.net/manual/en/language.oop5.abstract.php] implementations for additional examples.


== Installation

  gem install abstract_class


== Usage

Define an abstract class

  class ActiveRecord::Base
    abstract
  end

Try to initialize or allocate an instance of the class

  ActiveRecord::Base.new      #=> AbstractClass::Error - abstract class ActiveRecord::Base can't be instantiated
  ActiveRecord::Base.allocate #=> AbstractClass::Error - abstract class ActiveRecord::Base can't be allocated

Define a child class derived from an abstract class

  class User < ActiveRecord::Base
  end

Instantiation/allocation works like normal

  User.new      #=> #<User:0x003d066d5a861d>
  User.allocate #=> #<User:0x007f87588491d0>

Check if a class is abstract

  ActiveRecord::Base.abstract? #=> true
  User.abstract?               #=> false


== Testing

  bundle exec rspec


== Contributing

* Fork the project.
* Make your feature addition or bug fix.
* Add tests for it. This is important so I don't break it in a future version unintentionally.
* Commit, do not mess with Rakefile, version, or history. (if you want to have your own version, that is fine but bump version in a commit by itself I can ignore when I pull)
* Send me a pull request. Bonus points for topic branches.
